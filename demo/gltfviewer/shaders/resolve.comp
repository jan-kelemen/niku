#version 460

#extension GL_GOOGLE_include_directive : require

#include "color_conversion.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

layout(constant_id = 0) const int SAMPLES = 8;

layout(set = 0, binding = 0) uniform sampler2DMS backbuffer;

layout(rgba16f, set = 0, binding = 1) uniform image2D image;
layout(rgba16f, set = 0, binding = 2) uniform image2D bright;

float KarisAverage(vec3 col)
{
    // Formula is 1 / (1 + luma)
    float luma = luminance(col) * 0.25f;
    return 1.0f / (1.0f + luma);
}

void main()
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    vec4 result = vec4(0.0);
    vec4 groups[SAMPLES];
    for (int i = 0; i < SAMPLES; i++)
    {
        vec4 val = texelFetch(backbuffer, texelCoord, i);
        result += val;

        if (luminance(val.rgb) >= 1.0) {
            groups[i] = val * KarisAverage(val.rgb);
        }
        else {
            groups[i] = mix(vec4(0.0), val, luminance(val.rgb));
        }
    }
    result /= float(SAMPLES);
    result.a = 1.0;

    imageStore(image, texelCoord, result);

    result = vec4(0.0);
    for (int i = 0; i < SAMPLES; i++)
    {
        result += groups[i];
    }
    result /= float(SAMPLES);

    imageStore(bright, texelCoord / 2, result);
}
