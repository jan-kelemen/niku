#version 460

#extension GL_EXT_nonuniform_qualifier : require
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 16, local_size_y = 16) in;

layout(push_constant) uniform PushConsts
{
    uvec2 sourceResolution;
    uint sourceMip;
} pc;

layout(set = 0, binding = 0) uniform sampler2D backbuffer[];
layout(rgba16f, set = 0, binding = 1) uniform image2D image[];

float mipWeight() {
    return 1.0 / pow(2, pc.sourceMip);
}

void main()
{
    vec2 resolution = vec2(pc.sourceResolution.x, pc.sourceResolution.y);
    vec2 texelCoord = vec2(float(gl_GlobalInvocationID.x) /resolution.x, float(gl_GlobalInvocationID.y) / resolution.y);

    float x = 0.006;
    float y = 0.006;

    vec3 a = texture(backbuffer[pc.sourceMip + 1], vec2(texelCoord.x - x, texelCoord.y + y)).rgb;
    vec3 b = texture(backbuffer[pc.sourceMip + 1], vec2(texelCoord.x,     texelCoord.y + y)).rgb;
    vec3 c = texture(backbuffer[pc.sourceMip + 1], vec2(texelCoord.x + x, texelCoord.y + y)).rgb;

    vec3 d = texture(backbuffer[pc.sourceMip + 1], vec2(texelCoord.x - x, texelCoord.y)).rgb;
    vec3 e = texture(backbuffer[pc.sourceMip + 1], vec2(texelCoord.x,     texelCoord.y)).rgb;
    vec3 f = texture(backbuffer[pc.sourceMip + 1], vec2(texelCoord.x + x, texelCoord.y)).rgb;

    vec3 g = texture(backbuffer[pc.sourceMip + 1], vec2(texelCoord.x - x, texelCoord.y - y)).rgb;
    vec3 h = texture(backbuffer[pc.sourceMip + 1], vec2(texelCoord.x,     texelCoord.y - y)).rgb;
    vec3 i = texture(backbuffer[pc.sourceMip + 1], vec2(texelCoord.x + x, texelCoord.y - y)).rgb;

    vec3 upsample = e*4.0;
    upsample += (b+d+f+h)*2.0;
    upsample += (a+c+g+i);
    upsample *= 1.0 / 16.0;

    ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
    vec4 current = imageLoad(image[pc.sourceMip], storePos);
    current += vec4(upsample, 0.0) * mipWeight();

    imageStore(image[pc.sourceMip], storePos, current);
}
